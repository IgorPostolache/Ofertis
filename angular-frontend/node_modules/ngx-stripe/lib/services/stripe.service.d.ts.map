{"version":3,"file":"stripe.service.d.ts","sources":["stripe.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\nimport { ConfirmAuBecsDebitPaymentData, ConfirmAuBecsDebitSetupData, ConfirmBancontactPaymentData, ConfirmBancontactPaymentOptions, ConfirmCardPaymentData, ConfirmCardPaymentOptions, ConfirmEpsPaymentData, ConfirmEpsPaymentOptions, ConfirmFpxPaymentData, ConfirmFpxPaymentOptions, ConfirmGiropayPaymentData, ConfirmGiropayPaymentOptions, ConfirmIdealPaymentData, ConfirmIdealPaymentOptions, ConfirmP24PaymentData, ConfirmP24PaymentOptions, ConfirmCardSetupData, ConfirmCardSetupOptions, ConfirmSepaDebitPaymentData, ConfirmSepaDebitSetupData, CreatePaymentMethodData, CreateSourceData, CreateTokenIbanData, CreateTokenCardData, CreateTokenPiiData, CreateTokenBankAccountData, PaymentIntent, PaymentMethod, PaymentRequest, PaymentRequestOptions, RedirectToCheckoutOptions, RetrieveSourceParam, SetupIntent, Stripe, StripeCardElement, StripeCardNumberElement, StripeCardCvcElement, StripeConstructorOptions, StripeElements, StripeElementsOptions, StripeElement, StripeError, StripeIbanElement, Source, Token, TokenCreateParams } from '@stripe/stripe-js';\nimport { StripeServiceInterface } from '../interfaces/stripe-instance.interface';\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { StripeInstance } from './stripe-instance.class';\nexport declare class StripeService implements StripeServiceInterface {\n    key: string;\n    options: StripeConstructorOptions;\n    loader: LazyStripeAPILoader;\n    window: WindowRef;\n    stripe: StripeInstance;\n    constructor(key: string, options: StripeConstructorOptions, loader: LazyStripeAPILoader, window: WindowRef);\n    getStripeReference(): Observable<any>;\n    getInstance(): Stripe | undefined;\n    setKey(key: string, options?: StripeConstructorOptions): StripeInstance;\n    changeKey(key: string, options?: StripeConstructorOptions): StripeInstance;\n    elements(options?: StripeElementsOptions): Observable<StripeElements>;\n    redirectToCheckout(options?: RedirectToCheckoutOptions): Observable<never | {\n        error: StripeError;\n    }>;\n    confirmAuBecsDebitPayment(clientSecret: string, data?: ConfirmAuBecsDebitPaymentData): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmBancontactPayment(clientSecret: string, data?: ConfirmBancontactPaymentData, options?: ConfirmBancontactPaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmCardPayment(clientSecret: string, data?: ConfirmCardPaymentData, options?: ConfirmCardPaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmEpsPayment(clientSecret: string, data?: ConfirmEpsPaymentData, options?: ConfirmEpsPaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmFpxPayment(clientSecret: string, data?: ConfirmFpxPaymentData, options?: ConfirmFpxPaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmGiropayPayment(clientSecret: string, data?: ConfirmGiropayPaymentData, options?: ConfirmGiropayPaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmIdealPayment(clientSecret: string, data?: ConfirmIdealPaymentData, options?: ConfirmIdealPaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmP24Payment(clientSecret: string, data?: ConfirmP24PaymentData, options?: ConfirmP24PaymentOptions): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmSepaDebitPayment(clientSecret: string, data?: ConfirmSepaDebitPaymentData): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    handleCardAction(clientSecret: string): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    createPaymentMethod(paymentMethodData: CreatePaymentMethodData): Observable<{\n        paymentMethod?: PaymentMethod;\n        error?: StripeError;\n    }>;\n    retrievePaymentIntent(clientSecret: string): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    confirmAuBecsDebitSetup(clientSecret: string, data?: ConfirmAuBecsDebitSetupData): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n    confirmCardSetup(clientSecret: string, data?: ConfirmCardSetupData, options?: ConfirmCardSetupOptions): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n    confirmSepaDebitSetup(clientSecret: string, data?: ConfirmSepaDebitSetupData): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n    retrieveSetupIntent(clientSecret: string): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n    paymentRequest(options: PaymentRequestOptions): PaymentRequest | undefined;\n    createToken(tokenType: StripeIbanElement, data: CreateTokenIbanData): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createToken(tokenType: StripeCardElement | StripeCardNumberElement, data?: CreateTokenCardData): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createToken(tokenType: 'pii', data: CreateTokenPiiData): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createToken(tokenType: 'bank_account', data: CreateTokenBankAccountData): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createToken(tokenType: 'cvc_update', element?: StripeCardCvcElement): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createToken(tokenType: 'account', data: TokenCreateParams.Account): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createToken(tokenType: 'person', data: TokenCreateParams.Person): Observable<{\n        token?: Token;\n        error?: StripeError;\n    }>;\n    createSource(element: StripeElement, sourceData: CreateSourceData): Observable<{\n        source?: Source;\n        error?: StripeError;\n    }>;\n    createSource(sourceData: CreateSourceData): Observable<{\n        source?: Source;\n        error?: StripeError;\n    }>;\n    retrieveSource(source: RetrieveSourceParam): Observable<{\n        source?: Source;\n        error?: StripeError;\n    }>;\n    /**\n     * @deprecated\n     */\n    handleCardPayment(clientSecret: string, element?: any, data?: any): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    /**\n     * @deprecated\n     */\n    confirmPaymentIntent(clientSecret: string, element?: any, data?: any): Observable<{\n        paymentIntent?: PaymentIntent;\n        error?: StripeError;\n    }>;\n    /**\n     * @deprecated\n     */\n    handleCardSetup(clientSecret: string, element?: any, data?: any): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n    /**\n     * @deprecated\n     */\n    confirmSetupIntent(clientSecret: string, element?: any, data?: any): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n    /**\n     * @deprecated\n     */\n    handleFpxPayment(clientSecret: string, element?: any, data?: any): Observable<{\n        setupIntent?: SetupIntent;\n        error?: StripeError;\n    }>;\n}\n"]}
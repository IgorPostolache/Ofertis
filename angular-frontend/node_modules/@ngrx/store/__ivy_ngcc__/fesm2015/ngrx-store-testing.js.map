{"version":3,"file":"ngrx-store-testing.js","sources":["../../../../modules/store/testing/src/mock_state.ts","../../../../modules/store/testing/src/tokens.ts","../../../../modules/store/testing/src/mock_store.ts","../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../modules/store/testing/src/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n  ? MemoizedSelectorWithProps<any, any, Result>\n  : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n      ? U\n      : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(\n            () => {},\n            (): Result => value\n          )\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n\n  removeFeature(feature: any) {\n    /* noop */\n  }\n\n  removeFeatures(features: any) {\n    /* noop */\n  }\n\n  addReducer(key: any, reducer: any) {\n    /* noop */\n  }\n\n  addReducers(reducers: any) {\n    /* noop */\n  }\n\n  removeReducer(featureKey: any) {\n    /* noop */\n  }\n\n  removeReducers(featureKeys: any) {\n    /* noop */\n  }\n}\n","import {\n  ExistingProvider,\n  FactoryProvider,\n  Injector,\n  ValueProvider,\n} from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\n/**\n * @description\n * Creates mock store providers.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n */\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): (ValueProvider | ExistingProvider | FactoryProvider)[] {\n  setNgrxMockEnvironment(true);\n  return [\n    {\n      provide: ActionsSubject,\n      useFactory: () => new ActionsSubject(),\n      deps: [],\n    },\n    { provide: MockState, useFactory: () => new MockState<T>(), deps: [] },\n    {\n      provide: MockReducerManager,\n      useFactory: () => new MockReducerManager(),\n      deps: [],\n    },\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useExisting: MockState },\n    { provide: ReducerManager, useExisting: MockReducerManager },\n    {\n      provide: MockStore,\n      useFactory: mockStoreFactory,\n      deps: [\n        MockState,\n        ActionsSubject,\n        ReducerManager,\n        INITIAL_STATE,\n        MOCK_SELECTORS,\n      ],\n    },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nfunction mockStoreFactory<T>(\n  mockState: MockState<T>,\n  actionsSubject: ActionsSubject,\n  reducerManager: ReducerManager,\n  initialState: T,\n  mockSelectors: MockSelector[]\n): MockStore<T> {\n  return new MockStore(\n    mockState,\n    actionsSubject,\n    reducerManager,\n    initialState,\n    mockSelectors\n  );\n}\n\n/**\n * @description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns `MockStore<T>`\n *\n * @usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = getMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n */\nexport function getMockStore<T>(config: MockStoreConfig<T> = {}): MockStore<T> {\n  const injector = Injector.create({ providers: provideMockStore(config) });\n  return injector.get(MockStore);\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n"]}
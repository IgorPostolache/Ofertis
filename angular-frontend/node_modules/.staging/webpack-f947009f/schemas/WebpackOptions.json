{
  "additionalProperties": false,
  "definitions": {
    "common.pluginFunction": {
      "description": "Function acting as plugin",
      "instanceof": "Function",
      "properties": {
        "apply": {
          "description": "The run point of the plugin, required method.",
          "instanceof": "Function"
        }
      },
      "additionalProperties": true,
      "required": ["apply"]
    },
    "common.pluginObject": {
      "description": "Plugin instance",
      "type": "object",
      "properties": {
        "apply": {
          "description": "The run point of the plugin, required method.",
          "instanceof": "Function"
        }
      },
      "additionalProperties": true,
      "required": ["apply"]
    },
    "common.arrayOfStringOrStringArrayValues": {
      "items": {
        "description": "string or array of strings",
        "anyOf": [
          {
            "minLength": 1,
            "type": "string"
          },
          {
            "items": {
              "description": "A non-empty string",
              "minLength": 1,
              "type": "string"
            },
            "type": "array"
          }
        ]
      },
      "type": "array"
    },
    "common.arrayOfStringValues": {
      "items": {
        "description": "A non-empty string",
        "minLength": 1,
        "type": "string"
      },
      "type": "array"
    },
    "common.nonEmptyArrayOfUniqueStringValues": {
      "items": {
        "description": "A non-empty string",
        "minLength": 1,
        "type": "string"
      },
      "minItems": 1,
      "type": "array",
      "uniqueItems": true
    },
    "entry": {
      "oneOf": [
        {
          "minProperties": 1,
          "additionalProperties": {
            "description": "An entry point with name",
            "oneOf": [
              {
                "description": "The string is resolved to a module which is loaded upon startup.",
                "minLength": 1,
                "type": "string"
              },
              {
                "description": "All modules are loaded upon startup. The last one is exported.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
                  }
                ]
              }
            ]
          },
          "description": "Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.",
          "type": "object"
        },
        {
          "description": "An entry point without name. The string is resolved to a module which is loaded upon startup.",
          "minLength": 1,
          "type": "string"
        },
        {
          "description": "An entry point without name. All modules are loaded upon startup. The last one is exported.",
          "anyOf": [
            {
              "$ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
            }
          ]
        },
        {
          "description": "A Function returning an entry object, an entry string, an entry array or a promise to these things.",
          "instanceof": "Function"
        }
      ]
    },
    "externals": {
      "anyOf": [
        {
          "description": "An exact matched dependency becomes external. The same string is used as external dependency.",
          "type": "string"
        },
        {
          "additionalProperties": {
            "description": "The dependency used for the external",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "$ref": "#/definitions/common.arrayOfStringValues"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "description": "If an dependency matches exactly a property of the object, the property value is used as dependency.",
          "type": "object"
        },
        {
          "description": "`function(context, request, callback(err, result))` The function is called on each dependency.",
          "instanceof": "Function"
        },
        {
          "description": "Every matched dependency becomes external.",
          "instanceof": "RegExp"
        },
        {
          "items": {
            "description": "External configuration",
            "anyOf": [
              {
                "$ref": "#/definitions/externals"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "module": {
      "additionalProperties": false,
      "properties": {
        "exprContextCritical": {
          "description": "Enable warnings for full dynamic dependencies",
          "type": "boolean"
        },
        "exprContextRecursive": {
          "description": "Enable recursive directory lookup for full dynamic dependencies",
          "type": "boolean"
        },
        "exprContextRegExp": {
          "description": "Sets the default regular expression for full dynamic dependencies",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "instanceof": "RegExp"
            }
          ]
        },
        "exprContextRequest": {
          "description": "Set the default request for full dynamic dependencies",
          "type": "string"
        },
        "noParse": {
          "description": "Don't parse files matching. It's matched against the full resolved request.",
          "anyOf": [
            {
              "items": {
                "description": "A regular expression, when matched the module is not parsed",
                "instanceof": "RegExp"
              },
              "minItems": 1,
              "type": "array"
            },
            {
              "instanceof": "RegExp"
            },
            {
              "instanceof": "Function"
            },
            {
              "items": {
                "description": "An absolute path, when the module starts with this path it is not parsed",
                "type": "string",
                "absolutePath": true
              },
              "minItems": 1,
              "type": "array"
            },
            {
              "type": "string",
              "absolutePath": true
            }
          ]
        },
        "rules": {
          "allOf": [
            {
              "$ref": "#/definitions/ruleSet-rules"
            }
          ],
          "description": "An array of rules applied for modules."
        },
        "defaultRules": {
          "description": "An array of rules applied by default for modules.",
          "anyOf": [
            {
              "$ref": "#/definitions/ruleSet-rules"
            }
          ]
        },
        "unknownContextCritical": {
          "description": "Enable warnings when using the require function in a not statically analyse-able way",
          "type": "boolean"
        },
        "unknownContextRecursive": {
          "description": "Enable recursive directory lookup when using the require function in a not statically analyse-able way",
          "type": "boolean"
        },
        "unknownContextRegExp": {
          "description": "Sets the regular expression when using the require function in a not statically analyse-able way",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "instanceof": "RegExp"
            }
          ]
        },
        "unknownContextRequest": {
          "description": "Sets the request when using the require function in a not statically analyse-able way",
          "type": "string"
        },
        "unsafeCache": {
          "description": "Cache the resolving of module requests",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "instanceof": "Function"
            }
          ]
        },
        "wrappedContextCritical": {
          "description": "Enable warnings for partial dynamic dependencies",
          "type": "boolean"
        },
        "wrappedContextRecursive": {
          "description": "Enable recursive directory lookup for partial dynamic dependencies",
          "type": "boolean"
        },
        "wrappedContextRegExp": {
          "description": "Set the inner regular expression for partial dynamic dependencies",
          "instanceof": "RegExp"
        },
        "strictExportPresence": {
          "description": "Emit errors instead of warnings when imported names don't exist in imported module",
          "type": "boolean"
        },
        "strictThisContextOnImports": {
          "description": "Handle the this context correctly according to the spec for namespace objects",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "output": {
      "additionalProperties": false,
      "properties": {
        "auxiliaryComment": {
          "description": "Add a comment in the UMD wrapper.",
          "anyOf": [
            {
              "description": "Append the same comment above each import style.",
              "type": "string"
            },
            {
              "additionalProperties": false,
              "description": "Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.",
              "properties": {
                "amd": {
                  "description": "Set comment for `amd` section in UMD",
                  "type": "string"
                },
                "commonjs": {
                  "description": "Set comment for `commonjs` (exports) section in UMD",
                  "type": "string"
                },
                "commonjs2": {
                  "description": "Set comment for `commonjs2` (module.exports) section in UMD",
                  "type": "string"
                },
                "root": {
                  "description": "Set comment for `root` (global variable) section in UMD",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "chunkFilename": {
          "description": "The filename of non-entry chunks as relative path inside the `output.path` directory.",
          "type": "string",
          "absolutePath": false
        },
        "webassemblyModuleFilename": {
          "description": "The filename of WebAssembly modules as relative path inside the `output.path` directory.",
          "type": "string",
          "absolutePath": false
        },
        "globalObject": {
          "description": "An expression which is used to address the global object/scope in runtime code",
          "type": "string",
          "minLength": 1
        },
        "crossOriginLoading": {
          "description": "This option enables cross-origin loading of chunks.",
          "enum": [false, "anonymous", "use-credentials"]
        },
        "jsonpScriptType": {
          "description": "This option enables loading async chunks via a custom script type, such as script type=\"module\"",
          "enum": [false, "text/javascript", "module"]
        },
        "chunkLoadTimeout": {
          "description": "Number of milliseconds before chunk request expires",
          "type": "number"
        },
        "devtoolFallbackModuleFilenameTemplate": {
          "description": "Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "instanceof": "Function"
            }
          ]
        },
        "devtoolLineToLine": {
          "description": "Enable line to line mapped mode for all/specified modules. Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source. It’s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.",
          "anyOf": [
            {
              "description": "`true` enables it for all modules (not recommended)",
              "type": "boolean"
            },
            {
              "description": "An object similar to `module.loaders` enables it for specific files.",
              "type": "object"
            }
          ]
        },
        "devtoolModuleFilenameTemplate": {
          "description": "Filename template string of function for the sources array in a generated SourceMap.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "instanceof": "Function"
            }
          ]
        },
        "devtoolNamespace": {
          "description": "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
          "type": "string"
        },
        "filename": {
          "description": "Specifies the name of each output file on disk. You must **not** specify an absolute path here! The `output.path` option determines the location on disk the files are written to, filename is used solely for naming the individual files.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "instanceof": "Function"
            }
          ],
          "absolutePath": false
        },
        "hashDigest": {
          "description": "Digest type used for the hash",
          "type": "string"
        },
        "hashDigestLength": {
          "description": "Number of chars which are used for the hash",
          "minimum": 1,
          "type": "number"
        },
        "hashFunction": {
          "description": "Algorithm used for generation the hash (see node.js crypto package)",
          "anyOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "instanceof": "Function"
            }
          ]
        },
        "hashSalt": {
          "description": "Any string which is added to the hash to salt it",
          "minLength": 1,
          "type": "string"
        },
        "hotUpdateChunkFilename": {
          "description": "The filename of the Hot Update Chunks. They are inside the output.path directory.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "instanceof": "Function"
            }
          ],
          "absolutePath": false
        },
        "hotUpdateFunction": {
          "description": "The JSONP function used by webpack for async loading of hot update chunks.",
          "type": "string"
        },
        "hotUpdateMainFilename": {
          "description": "The filename of the Hot Update Main File. It is inside the `output.path` directory.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "instanceof": "Function"
            }
          ],
          "absolutePath": false
        },
        "jsonpFunction": {
          "description": "The JSONP function used by webpack for async loading of chunks.",
          "type": "string"
        },
        "chunkCallbackName": {
          "description": "The callback function name used by webpack for loading of chunks in WebWorkers.",
          "type": "string"
        },
        "library": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "description": "A part of the library name",
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "root": {
                  "description": "Name of the property exposed globally by a UMD library",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/common.arrayOfStringValues"
         